---
layout: ""
page_title: "Resource: multispace_run"
description: |-
  A `multispace_run` manages the initialization and destruction of a Terraform workspace. This will queue and run an `apply` once (only if no other applies have been run) and on destroy will queue and run a `destroy` run.
---

# Resource: {{ .Name }}

A `multispace_run` runs one `apply` on creation and one `destroy` on
destruction. This can be used to enable cascading initialization of
Terraform workspaces.

The workspace must be created prior to the execution of this resource,
but it can be created dynamically at Terraform apply-time using the
[tfe provider](https://registry.terraform.io/providers/hashicorp/tfe/latest).

~> **Warning!** This will _auto-apply_ a create on creation and a destroy
on destruction. You should be very careful about what is allowed to trigger
this resource and when.

## Existing Workspaces

If you use a `multispace_run` on a workspace that already exist and has
had a successful apply, `multispace_run` will queue _another_ apply. This
provider expects to "own" exactly one apply. Therefore, be careful if
using this with existing Terraform workspaces.

A future version of this provider will change this default to skip
if the last created state version was from a non-destroy run. The current
version **does not do this.**

## Timeouts

Workspace creation can take a long time. The default timeouts for the
create and destroy of a workspace is set to 15 minutes. This can be
customized using the
[resource timeouts configuration](https://www.terraform.io/docs/language/resources/syntax.html#operation-timeouts).

## Example Usage: Cascading Workspaces

```hcl
resource "multispace_run" "root" {
  # Use string workspace names here and not data sources so that
  # you can define the multispace runs before the workspace even exists.
  organization = "my-org"
  workspace    = "tfc"
}

resource "multispace_run" "physical" {
  organization = "my-org"
  workspace    = "k8s-physical"
  depends_on   = [multispace_run.root]
}

resource "multispace_run" "core" {
  organization = "my-org"
  workspace    = "k8s-core"
  depends_on   = [multispace_run.physical]
}

resource "multispace_run" "dns" {
  organization = "my-org"
  workspace    = "dns"
  depends_on   = [multispace_run.root]
}

resource "multispace_run" "ingress" {
  organization = "my-org"
  workspace    = "ingress"
  depends_on   = [multispace_run.core, multispace_run.dns]
}
```

## Example Usage: Run Retry

Run retrying is enabled by default and no further configuration is required.
Retrying causes `multispace_run` to retry if there is an error during the
plan or apply. This can be customized using the `retry_*` fields.

```hcl
resource "multispace_run" "root" {
  organization = "my-org"
  workspace    = "tfc"

  retry_attempts    = 3
  retry_backoff_min = 15
}
```

{{ .SchemaMarkdown | trimspace }}
